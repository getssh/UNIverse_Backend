/:
  get:
    tags:
      - Groups
    summary: Get all groups
    description: Retrieve a list of all groups with optional filtering
    parameters:
      - name: type
        in: query
        schema:
          type: string
          enum: [student, faculty, general, course_specific, club_organization, other]
        description: Filter by group type
      - name: privacy
        in: query
        schema:
          type: string
          enum: [public, private, university_only, faculty_only, students_only]
        description: Filter by privacy setting
      - name: universityId
        in: query
        schema:
          type: string
          format: uuid
        description: Filter by university ID
      - name: tag
        in: query
        schema:
          type: string
        description: Filter by tag
      - name: search
        in: query
        schema:
          type: string
        description: Search by group name
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        description: Page number for pagination
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
        description: Number of items per page
      - name: sort
        in: query
        schema:
          type: string
          enum: [members, name, createdAt]
          default: createdAt
        description: Sort order
    responses:
      '200':
        description: List of groups retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                count:
                  type: integer
                  description: Number of groups in current page
                pagination:
                  type: object
                  properties:
                    totalGroups:
                      type: integer
                      description: Total number of groups
                    totalPages:
                      type: integer
                      description: Total number of pages
                    currentPage:
                      type: integer
                      description: Current page number
                    limit:
                      type: integer
                      description: Number of items per page
                data:
                  type: array
                  items:
                    $ref: '../components/schemas/Group.yaml#/Group'
      '500':
        $ref: '../components/responses/commonResponses.yaml#/ServerError'

  post:
    tags:
      - Groups
    summary: Create a new group
    description: Create a new group with profile picture, cover photo, and details
    security:
      - BearerAuth: []
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
              - name
              - groupType
              - privacy
              - university
            properties:
              name:
                type: string
                maxLength: 100
              description:
                type: string
                maxLength: 1000
              groupType:
                type: string
                enum: [student, faculty, general, course_specific, club_organization, other]
              privacy:
                type: string
                enum: [public, private, university_only, faculty_only, students_only]
              university:
                type: string
                format: uuid
              rules:
                type: array
                items:
                  type: string
                  maxLength: 500
              tags:
                type: array
                items:
                  type: string
              profilePic:
                type: string
                format: binary
              coverPhoto:
                type: string
                format: binary
    responses:
      '201':
        description: Group created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../components/schemas/Group.yaml#/Group'
      '400':
        $ref: '../components/responses/commonResponses.yaml#/ValidationError'
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'
      '409':
        description: Group name already exists
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: false
                error:
                  type: string
                  example: Group name already exists

/{groupId}:
  get:
    tags:
      - Groups
    summary: Get group by ID
    description: Retrieve a group's details by its ID
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    responses:
      '200':
        description: Group details retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../components/schemas/Group.yaml#/Group'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

  put:
    tags:
      - Groups
    summary: Update group
    description: Update a group's details
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              name:
                type: string
                maxLength: 100
              description:
                type: string
                maxLength: 1000
              groupType:
                type: string
                enum: [student, faculty, general, course_specific, club_organization, other]
              privacy:
                type: string
                enum: [public, private, university_only, faculty_only, students_only]
              rules:
                type: array
                items:
                  type: string
                  maxLength: 500
              tags:
                type: array
                items:
                  type: string
              profilePic:
                type: string
                format: binary
              coverPhoto:
                type: string
                format: binary
    responses:
      '200':
        description: Group updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  $ref: '../components/schemas/Group.yaml#/Group'
      '400':
        $ref: '../components/responses/commonResponses.yaml#/ValidationError'
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

  delete:
    tags:
      - Groups
    summary: Delete group
    description: Delete a group and all its associated data
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    responses:
      '200':
        description: Group deleted successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: Group deleted successfully
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

/{groupId}/join:
  post:
    tags:
      - Groups
    summary: Request to join group
    description: Send a request to join a group
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                maxLength: 200
                description: Optional message to group admins
    responses:
      '201':
        description: Join request sent successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: Join request sent successfully
      '400':
        $ref: '../components/responses/commonResponses.yaml#/ValidationError'
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

/{groupId}/leave:
  post:
    tags:
      - Groups
    summary: Leave group
    description: Leave a group
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    responses:
      '200':
        description: Left group successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: Left group successfully
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

/{groupId}/join-requests:
  get:
    tags:
      - Groups
    summary: Get join requests
    description: Get all pending join requests for a group
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
    responses:
      '200':
        description: Join requests retrieved successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      user:
                        type: string
                        format: uuid
                      requestedAt:
                        type: string
                        format: date-time
                      message:
                        type: string
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError'

/{groupId}/join-requests/{requestId}:
  put:
    tags:
      - Groups
    summary: Handle join request
    description: Approve or reject a join request
    security:
      - BearerAuth: []
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the group
      - name: requestId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the join request
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - action
            properties:
              action:
                type: string
                enum: [approve, reject]
                description: Action to take on the join request
    responses:
      '200':
        description: Join request handled successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: Join request approved/rejected successfully
      '400':
        $ref: '../components/responses/commonResponses.yaml#/ValidationError'
      '401':
        $ref: '../components/responses/commonResponses.yaml#/UnauthorizedError'
      '403':
        $ref: '../components/responses/commonResponses.yaml#/ForbiddenError'
      '404':
        $ref: '../components/responses/commonResponses.yaml#/NotFoundError' 