openapi: 3.0.0
info:
  title: UNIverse Group API
  description: |
    Group management API for the UNIverse platform.
    This API provides endpoints for managing study groups, group members, and related operations.
  version: 1.0.0
  contact:
    name: UNIverse Support
    email: universe.ethiopia@gmail.com

servers:
  - url: https://universe-backend-kpry.onrender.com/api
    description: Production server
  - url: http://localhost:5000/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the group
        name:
          type: string
          description: Name of the group
          maxLength: 100
        description:
          type: string
          description: Detailed description of the group
          maxLength: 1000
        profilePic:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: URL of the group profile picture
            publicId:
              type: string
              description: Cloudinary public ID of the profile picture
        coverPhoto:
          type: object
          properties:
            url:
              type: string
              format: uri
              description: URL of the group cover photo
            publicId:
              type: string
              description: Cloudinary public ID of the cover photo
        createdBy:
          type: string
          format: uuid
          description: Reference to the user who created the group
        admins:
          type: array
          items:
            type: string
            format: uuid
          description: List of admin user IDs
        moderators:
          type: array
          items:
            type: string
            format: uuid
          description: List of moderator user IDs
        members:
          type: array
          items:
            type: string
            format: uuid
          description: List of member user IDs
        groupType:
          type: string
          enum: [student, faculty, general, course_specific, club_organization, other]
          description: Type of the group
        privacy:
          type: string
          enum: [public, private, university_only, faculty_only, students_only]
          description: Privacy setting of the group
        university:
          type: string
          format: uuid
          description: Reference to the university
        rules:
          type: array
          items:
            type: string
            maxLength: 500
          description: List of group rules
        tags:
          type: array
          items:
            type: string
            maxLength: 50
          description: List of group tags
        status:
          type: string
          enum: [active, inactive, archived, under_review]
          description: Current status of the group
        joinRequests:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
                format: uuid
              requestedAt:
                type: string
                format: date-time
              message:
                type: string
                maxLength: 200
        associatedChat:
          type: string
          format: uuid
          description: Reference to the associated chat
        createdAt:
          type: string
          format: date-time
          description: When the group was created
        updatedAt:
          type: string
          format: date-time
          description: When the group was last updated

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message

paths:
  /groups:
    get:
      tags:
        - Groups
      summary: Get all groups
      description: Retrieve a list of all groups with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Filter groups by type
          schema:
            type: string
            enum: [student, faculty, general, course_specific, club_organization, other]
        - name: privacy
          in: query
          description: Filter groups by privacy setting
          schema:
            type: string
            enum: [public, private, university_only, faculty_only, students_only]
        - name: universityId
          in: query
          description: Filter groups by university ID
          schema:
            type: string
        - name: tag
          in: query
          description: Filter groups by tag
          schema:
            type: string
        - name: search
          in: query
          description: Search groups by name
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of groups per page
          schema:
            type: integer
            default: 10
            maximum: 100
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            enum: [members, name, createdAt]
      responses:
        '200':
          description: List of groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                  pagination:
                    type: object
                    properties:
                      totalGroups:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
                      limit:
                        type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Groups
      summary: Create a new group
      description: Create a new group
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - groupType
                - privacy
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  maxLength: 1000
                groupType:
                  type: string
                  enum: [student, faculty, general, course_specific, club_organization, other]
                privacy:
                  type: string
                  enum: [public, private, university_only, faculty_only, students_only]
                university:
                  type: string
                rules:
                  type: array
                  items:
                    type: string
                    maxLength: 500
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 50
                profilePic:
                  type: string
                  format: binary
                coverPhoto:
                  type: string
                  format: binary
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Group name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}:
    get:
      tags:
        - Groups
      summary: Get group details
      description: Retrieve detailed information about a specific group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to view this group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Groups
      summary: Update group details
      description: Update group information (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 100
                description:
                  type: string
                  maxLength: 1000
                groupType:
                  type: string
                  enum: [student, faculty, general, course_specific, club_organization, other]
                privacy:
                  type: string
                  enum: [public, private, university_only, faculty_only, students_only]
                university:
                  type: string
                rules:
                  type: array
                  items:
                    type: string
                    maxLength: 500
                tags:
                  type: array
                  items:
                    type: string
                    maxLength: 50
                profilePic:
                  type: string
                  format: binary
                coverPhoto:
                  type: string
                  format: binary
      responses:
        '200':
          description: Group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Groups
      summary: Delete group
      description: Delete a group (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/user/{userId}:
    get:
      tags:
        - Groups
      summary: Get user's groups
      description: Retrieve all groups that a user is a member of
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/user/{userId}/created:
    get:
      tags:
        - Groups
      summary: Get user's created groups
      description: Retrieve all groups created by a user
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's created groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/user/{userId}/non-member:
    get:
      tags:
        - Groups
      summary: Get non-member groups
      description: Retrieve all groups that a user is not a member of
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Non-member groups retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/join:
    post:
      tags:
        - Groups
      summary: Join or request to join a group
      description: Join a public group or request to join a private group
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  maxLength: 200
                  description: Optional message for join request
      responses:
        '200':
          description: Successfully joined or requested to join the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to join
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/leave:
    delete:
      tags:
        - Groups
      summary: Leave a group
      description: Leave a group as a member
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully left the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to leave
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/join-requests:
    get:
      tags:
        - Groups
      summary: Get join requests
      description: Get all pending join requests for a group (Admin/Moderator only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Join requests retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: string
                          format: uuid
                        requestedAt:
                          type: string
                          format: date-time
                        message:
                          type: string
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/join-requests/{requestId}:
    put:
      tags:
        - Groups
      summary: Manage join request
      description: Approve or reject a join request (Admin/Moderator only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: requestId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - action
              properties:
                action:
                  type: string
                  enum: [approve, reject]
      responses:
        '200':
          description: Join request managed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/members/{memberId}/promote-admin:
    put:
      tags:
        - Groups
      summary: Promote member to admin
      description: Promote a member to admin role (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member promoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/members/{memberId}/promote-moderator:
    put:
      tags:
        - Groups
      summary: Promote member to moderator
      description: Promote a member to moderator role (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member promoted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /groups/{groupId}/members/{memberIdToKick}/kick:
    delete:
      tags:
        - Groups
      summary: Kick member from group
      description: Remove a member from the group (Admin/Moderator only)
      security:
        - BearerAuth: []
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: memberIdToKick
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member kicked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Group or member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
