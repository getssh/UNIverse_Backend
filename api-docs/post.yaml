openapi: 3.0.0
info:
  title: UNIverse Post API
  description: |
    Post management API for the UNIverse platform.
    This API provides endpoints for managing posts, comments, likes, and related operations.
  version: 1.0.0
  contact:
    name: UNIverse Support
    email: support@universe.com

servers:
  - url: https://universe-backend-kpry.onrender.com/api
    description: Production server
  - url: http://localhost:5000/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the post
        channel:
          type: string
          format: uuid
          description: Reference to the channel
        author:
          type: string
          format: uuid
          description: Reference to the user who created the post
        content:
          type: string
          description: Content of the post
        media:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [image, video, file]
                description: Type of media
              url:
                type: string
                format: uri
                description: URL of the media
              publicId:
                type: string
                description: Cloudinary public ID
        likes:
          type: array
          items:
            type: string
            format: uuid
          description: List of user IDs who liked the post
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          type: string
          format: date-time
          description: When the post was created
        updatedAt:
          type: string
          format: date-time
          description: When the post was last updated

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the comment
        post:
          type: string
          format: uuid
          description: Reference to the post
        author:
          type: string
          format: uuid
          description: Reference to the user who created the comment
        content:
          type: string
          description: Content of the comment
        likes:
          type: array
          items:
            type: string
            format: uuid
          description: List of user IDs who liked the comment
        createdAt:
          type: string
          format: date-time
          description: When the comment was created
        updatedAt:
          type: string
          format: date-time
          description: When the comment was last updated

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Success message

paths:
  /posts:
    get:
      tags:
        - Posts
      summary: Get all posts
      description: Retrieve a list of all posts with optional filtering
      security:
        - BearerAuth: []
      parameters:
        - name: channel
          in: query
          description: Filter posts by channel ID
          schema:
            type: string
        - name: author
          in: query
          description: Filter posts by author ID
          schema:
            type: string
        - name: search
          in: query
          description: Search posts by content
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of posts per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: Get post details
      description: Retrieve detailed information about a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  post:
                    $ref: '#/components/schemas/Post'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Posts
      summary: Update post
      description: Update post content and media (Author only)
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                content:
                  type: string
                media:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  post:
                    $ref: '#/components/schemas/Post'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to update this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Posts
      summary: Delete post
      description: Delete a post (Author or Channel Moderator only)
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to delete this post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}/like:
    post:
      tags:
        - Posts
      summary: Like/Unlike post
      description: Toggle like status for a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  liked:
                    type: boolean
                    description: Whether the post is now liked by the user
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}/comments:
    get:
      tags:
        - Comments
      summary: Get post comments
      description: Retrieve all comments for a specific post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of comments per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Comments
      summary: Add comment to post
      description: Add a new comment to a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Comment added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  comment:
                    $ref: '#/components/schemas/Comment'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}/comments/{commentId}:
    put:
      tags:
        - Comments
      summary: Update comment
      description: Update comment content (Author only)
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  comment:
                    $ref: '#/components/schemas/Comment'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to update this comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Comments
      summary: Delete comment
      description: Delete a comment (Author or Channel Moderator only)
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Not authorized to delete this comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}/comments/{commentId}/like:
    post:
      tags:
        - Comments
      summary: Like/Unlike comment
      description: Toggle like status for a comment
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like status toggled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  liked:
                    type: boolean
                    description: Whether the comment is now liked by the user
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Post or comment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
